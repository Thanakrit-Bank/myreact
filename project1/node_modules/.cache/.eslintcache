[{"C:\\Users\\Administrator\\Desktop\\Project\\myreact\\project1\\src\\index.js":"1","C:\\Users\\Administrator\\Desktop\\Project\\myreact\\project1\\src\\App.js":"2","C:\\Users\\Administrator\\Desktop\\Project\\myreact\\project1\\src\\components\\Demo.jsx":"3","C:\\Users\\Administrator\\Desktop\\Project\\myreact\\project1\\src\\components\\Setting.jsx":"4","C:\\Users\\Administrator\\Desktop\\Project\\myreact\\project1\\src\\components\\MainMap.jsx":"5","C:\\Users\\Administrator\\Desktop\\Project\\myreact\\project1\\src\\components\\GridData.jsx":"6","C:\\Users\\Administrator\\Desktop\\Project\\myreact\\project1\\src\\components\\Legend.jsx":"7","C:\\Users\\Administrator\\Desktop\\Project\\myreact\\project1\\src\\data\\dataLegend.js":"8"},{"size":263,"mtime":1663082920214,"results":"9","hashOfConfig":"10"},{"size":265,"mtime":1673166902168,"results":"11","hashOfConfig":"10"},{"size":8604,"mtime":1673166335786,"results":"12","hashOfConfig":"10"},{"size":256,"mtime":1673169026612,"results":"13","hashOfConfig":"10"},{"size":3565,"mtime":1663165210179,"results":"14","hashOfConfig":"10"},{"size":2868,"mtime":1663169140190,"results":"15","hashOfConfig":"10"},{"size":2586,"mtime":1663169403479,"results":"16","hashOfConfig":"10"},{"size":114,"mtime":1663163117624,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"jg79zu",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"21"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"21"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"21"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"C:\\Users\\Administrator\\Desktop\\Project\\myreact\\project1\\src\\index.js",[],[],[],"C:\\Users\\Administrator\\Desktop\\Project\\myreact\\project1\\src\\App.js",["46","47"],[],"import \"./App.css\"\r\nimport MainMap from \"./components/MainMap\";\r\nimport 'leaflet/dist/leaflet.css' \r\nimport Demo from \"./components/Demo\";\r\nimport Setting from \"./components/Setting\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Setting/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Administrator\\Desktop\\Project\\myreact\\project1\\src\\components\\Demo.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\Project\\myreact\\project1\\src\\components\\Setting.jsx",["48"],[],"C:\\Users\\Administrator\\Desktop\\Project\\myreact\\project1\\src\\components\\MainMap.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\Project\\myreact\\project1\\src\\components\\GridData.jsx",["49"],[],"import {GeoJSON, Popup, FeatureGroup} from 'react-leaflet' \r\nimport React, { useState,useEffect } from 'react'\r\nimport legendData from  './../data/dataLegend'  \r\n\r\nfunction GridData(props) {\r\n    // const [url, setUrl] = useState('http://127.0.0.1:5000/get_spei/Amnat Charoen&1902-02')\r\n    // const [url, seturl] = useState('http://127.0.0.1:5000/get_province/Chiang Mai')\r\n    // const [url, seturl] = useState('http://127.0.0.1:5000/get_grid')\r\n    const [data, setData] = useState([])\r\n    const url = 'http://127.0.0.1:5000/get_spei/'.concat(props.pName).concat('&1902-02')\r\n    const interval = (legendData.spei.max - legendData.spei.min)/8\r\n\r\n    useEffect(()=>{\r\n        setData([])\r\n        fetchData(url)\r\n        console.log(url);\r\n    },[props.pName])\r\n\r\n    function fetchData(url) {\r\n        const reqOptions ={\r\n          method:\"get\", \r\n          headers:{\"x-access-token\": \"test\"},\r\n        }\r\n        \r\n        let request = fetch(url, reqOptions);\r\n        console.log('feching');\r\n        request\r\n        .then(r => r.json())\r\n        .then(data => {\r\n            setData(data)\r\n        }, (error) => {\r\n            console.error(error);\r\n        });\r\n      }\r\n    return (\r\n    <FeatureGroup>\r\n    \r\n        {data.map(data => {\r\n        var myStyleGrid = {\r\n            color: \"white\",\r\n            weight: 0,\r\n            fillOpacity: 0.75,\r\n            fillColor: 'white',\r\n        }\r\n        if(data.properties.index < legendData.spei.min){\r\n            myStyleGrid.fillColor = '#FFEDA0'\r\n        }else if(data.properties.index < legendData.spei.min + interval){\r\n            myStyleGrid.fillColor = '#FED976'\r\n        }else if(data.properties.index < legendData.spei.min + 2*interval){\r\n            myStyleGrid.fillColor = '#FED976'\r\n        }else if(data.properties.index < legendData.spei.min + 3*interval){\r\n            myStyleGrid.fillColor = '#FEB24C'\r\n        }else if(data.properties.index < legendData.spei.min + 4*interval){\r\n            myStyleGrid.fillColor = '#FD8D3C'\r\n        }else if(data.properties.index < legendData.spei.min + 5*interval){\r\n            myStyleGrid.fillColor = '#FC4E2A'\r\n        }else if(data.properties.index < legendData.spei.min + 6*interval){\r\n            myStyleGrid.fillColor = '#E31A1C'\r\n        }else if(data.properties.index < legendData.spei.min + 7*interval){\r\n            myStyleGrid.fillColor = '#BD0026'\r\n        }else {\r\n            myStyleGrid.fillColor = '#800026'\r\n        }\r\n        \r\n        return (\r\n        <GeoJSON key={data.properties.grid_id}  data={data} style={myStyleGrid}>\r\n            {console.log(data)}\r\n            <Popup> {Math.round(data.properties.index*1000)/1000} </Popup>\r\n        </GeoJSON>)\r\n        })}\r\n\r\n        {console.log(props.pName)}\r\n        {console.log(url)}\r\n        {console.log('return')}\r\n\r\n    </FeatureGroup> \r\n  )\r\n}\r\n\r\n\r\n\r\nexport default GridData","C:\\Users\\Administrator\\Desktop\\Project\\myreact\\project1\\src\\components\\Legend.jsx",["50"],[],"import { useMap } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport { useEffect } from \"react\";\r\nimport legendData from  './../data/dataLegend'  \r\n\r\nconst Legend = () => {\r\n    const mapInstance = useMap();\r\n    const interval = (legendData.spei.max - legendData.spei.min)/8\r\n    useEffect(() => {\r\n    // get color depending on population density value\r\n    const getColor = d => {\r\n      return d > legendData.spei.min + 7*interval\r\n        ? \"#FFEDA0\"\r\n        : d > legendData.spei.min + 6*interval\r\n        ? \"#FED976\"\r\n        : d > legendData.spei.min + 5*interval\r\n        ? \"#FED976\"\r\n        : d > legendData.spei.min + 4*interval\r\n        ? \"#FEB24C\"\r\n        : d > legendData.spei.min + 3*interval\r\n        ? \"#FD8D3C\"\r\n        : d > legendData.spei.min + 2*interval\r\n        ? \"#FC4E2A\"\r\n        : d > legendData.spei.min + interval\r\n        ? \"#E31A1C\"\r\n        : d > legendData.spei.min\r\n        ? \"#BD0026\"\r\n        : \"#800026\"\r\n    };\r\n\r\n    const legend = L.control({ position: \"bottomright\" });\r\n\r\n    legend.onAdd = () => {\r\n      const div = L.DomUtil.create(\"div\", \"info legend\");\r\n      const grades = \r\n      [\r\n        // legendData.spei.min.toFixed(2),\r\n        // (legendData.spei.min + interval).toFixed(2), \r\n        // (legendData.spei.min + 2*interval).toFixed(2), \r\n        // (legendData.spei.min + 3*interval).toFixed(2), \r\n        // (legendData.spei.min + 4*interval).toFixed(2), \r\n        // (legendData.spei.min + 5*interval).toFixed(2), \r\n        // (legendData.spei.min + 6*interval).toFixed(2), \r\n        // (legendData.spei.min + 7*interval).toFixed(2)\r\n\r\n        (legendData.spei.min + 7*interval).toFixed(2), \r\n        (legendData.spei.min + 6*interval).toFixed(2), \r\n        (legendData.spei.min + 5*interval).toFixed(2), \r\n        (legendData.spei.min + 4*interval).toFixed(2), \r\n        (legendData.spei.min + 3*interval).toFixed(2), \r\n        (legendData.spei.min + 2*interval).toFixed(2), \r\n        (legendData.spei.min + 1*interval).toFixed(2),\r\n        legendData.spei.min.toFixed(2)\r\n      ];\r\n\r\n      let labels = [];\r\n      let from;\r\n      let to;\r\n\r\n      for (let i = 0; i < grades.length; i++) {\r\n        from = grades[i];\r\n        to = grades[i + 1];\r\n\r\n        labels.push(\r\n          '<i style=\"background:' +\r\n            getColor(from + 1) +\r\n            '\"></i> ' +\r\n            from +\r\n            (to ? \" &ndash; \" + to : \"+\")\r\n        );\r\n      }\r\n\r\n      div.innerHTML = labels.join(\"<br>\");\r\n      return div;\r\n    };\r\n\r\n    legend.addTo(mapInstance);\r\n  } , []);\r\n  return null;\r\n};\r\n\r\nexport default Legend;\r\n","C:\\Users\\Administrator\\Desktop\\Project\\myreact\\project1\\src\\data\\dataLegend.js",[],[],{"ruleId":"51","severity":1,"message":"52","line":2,"column":8,"nodeType":"53","messageId":"54","endLine":2,"endColumn":15},{"ruleId":"51","severity":1,"message":"55","line":4,"column":8,"nodeType":"53","messageId":"54","endLine":4,"endColumn":12},{"ruleId":"51","severity":1,"message":"56","line":1,"column":10,"nodeType":"53","messageId":"54","endLine":1,"endColumn":16},{"ruleId":"57","severity":1,"message":"58","line":17,"column":7,"nodeType":"59","endLine":17,"endColumn":20,"suggestions":"60"},{"ruleId":"57","severity":1,"message":"61","line":78,"column":7,"nodeType":"59","endLine":78,"endColumn":9,"suggestions":"62"},"no-unused-vars","'MainMap' is defined but never used.","Identifier","unusedVar","'Demo' is defined but never used.","'render' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'url'. Either include it or remove the dependency array.","ArrayExpression",["63"],"React Hook useEffect has missing dependencies: 'interval' and 'mapInstance'. Either include them or remove the dependency array.",["64"],{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"Update the dependencies array to be: [props.pName, url]",{"range":"69","text":"70"},"Update the dependencies array to be: [interval, mapInstance]",{"range":"71","text":"72"},[749,762],"[props.pName, url]",[2534,2536],"[interval, mapInstance]"]