{"ast":null,"code":"import _slicedToArray from \"C:/Users/Administrator/Desktop/Project/myreact/project1/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\Project\\\\myreact\\\\project1\\\\src\\\\components\\\\GridData.jsx\",\n  _s = $RefreshSig$();\nimport { GeoJSON, Popup, FeatureGroup } from 'react-leaflet';\nimport React, { useState, useEffect } from 'react';\nimport legendData from './../data/dataLegend';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GridData(props) {\n  _s();\n  var _this = this;\n  // const [url, setUrl] = useState('http://127.0.0.1:5000/get_spei/Amnat Charoen&1902-02')\n  // const [url, seturl] = useState('http://127.0.0.1:5000/get_province/Chiang Mai')\n  // const [url, seturl] = useState('http://127.0.0.1:5000/get_grid')\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var url = 'http://127.0.0.1:5000/get_spei/'.concat(props.pName).concat('&1902-02');\n  var interval = (legendData.spei.max - legendData.spei.min) / 8;\n  useEffect(function () {\n    setData([]);\n    fetchData(url);\n    console.log(url);\n  }, [props.pName]);\n  function fetchData(url) {\n    var reqOptions = {\n      method: \"get\",\n      headers: {\n        \"x-access-token\": \"test\"\n      }\n    };\n    var request = fetch(url, reqOptions);\n    console.log('feching');\n    request.then(function (r) {\n      return r.json();\n    }).then(function (data) {\n      setData(data);\n    }, function (error) {\n      console.error(error);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(FeatureGroup, {\n    children: [data.map(function (data) {\n      var myStyleGrid = {\n        color: \"white\",\n        weight: 0,\n        fillOpacity: 0.75,\n        fillColor: 'white'\n      };\n      if (data.properties.index < legendData.spei.min) {\n        myStyleGrid.fillColor = '#FFEDA0';\n      } else if (data.properties.index < legendData.spei.min + interval) {\n        myStyleGrid.fillColor = '#FED976';\n      } else if (data.properties.index < legendData.spei.min + 2 * interval) {\n        myStyleGrid.fillColor = '#FED976';\n      } else if (data.properties.index < legendData.spei.min + 3 * interval) {\n        myStyleGrid.fillColor = '#FEB24C';\n      } else if (data.properties.index < legendData.spei.min + 4 * interval) {\n        myStyleGrid.fillColor = '#FD8D3C';\n      } else if (data.properties.index < legendData.spei.min + 5 * interval) {\n        myStyleGrid.fillColor = '#FC4E2A';\n      } else if (data.properties.index < legendData.spei.min + 6 * interval) {\n        myStyleGrid.fillColor = '#E31A1C';\n      } else if (data.properties.index < legendData.spei.min + 7 * interval) {\n        myStyleGrid.fillColor = '#BD0026';\n      } else {\n        myStyleGrid.fillColor = '#800026';\n      }\n      return /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: data,\n        style: myStyleGrid,\n        children: [console.log(data), /*#__PURE__*/_jsxDEV(Popup, {\n          children: [\" \", Math.round(data.properties.index * 1000) / 1000, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, _this)]\n      }, data.properties.grid_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, _this);\n    }), console.log(props.pName), console.log(url), console.log('return')]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(GridData, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = GridData;\nexport default GridData;\nvar _c;\n$RefreshReg$(_c, \"GridData\");","map":{"version":3,"names":["GeoJSON","Popup","FeatureGroup","React","useState","useEffect","legendData","GridData","props","data","setData","url","concat","pName","interval","spei","max","min","fetchData","console","log","reqOptions","method","headers","request","fetch","then","r","json","error","map","myStyleGrid","color","weight","fillOpacity","fillColor","properties","index","Math","round","grid_id"],"sources":["C:/Users/Administrator/Desktop/Project/myreact/project1/src/components/GridData.jsx"],"sourcesContent":["import {GeoJSON, Popup, FeatureGroup} from 'react-leaflet' \r\nimport React, { useState,useEffect } from 'react'\r\nimport legendData from  './../data/dataLegend'  \r\n\r\nfunction GridData(props) {\r\n    // const [url, setUrl] = useState('http://127.0.0.1:5000/get_spei/Amnat Charoen&1902-02')\r\n    // const [url, seturl] = useState('http://127.0.0.1:5000/get_province/Chiang Mai')\r\n    // const [url, seturl] = useState('http://127.0.0.1:5000/get_grid')\r\n    const [data, setData] = useState([])\r\n    const url = 'http://127.0.0.1:5000/get_spei/'.concat(props.pName).concat('&1902-02')\r\n    const interval = (legendData.spei.max - legendData.spei.min)/8\r\n\r\n    useEffect(()=>{\r\n        setData([])\r\n        fetchData(url)\r\n        console.log(url);\r\n    },[props.pName])\r\n\r\n    function fetchData(url) {\r\n        const reqOptions ={\r\n          method:\"get\", \r\n          headers:{\"x-access-token\": \"test\"},\r\n        }\r\n        \r\n        let request = fetch(url, reqOptions);\r\n        console.log('feching');\r\n        request\r\n        .then(r => r.json())\r\n        .then(data => {\r\n            setData(data)\r\n        }, (error) => {\r\n            console.error(error);\r\n        });\r\n      }\r\n    return (\r\n    <FeatureGroup>\r\n    \r\n        {data.map(data => {\r\n        var myStyleGrid = {\r\n            color: \"white\",\r\n            weight: 0,\r\n            fillOpacity: 0.75,\r\n            fillColor: 'white',\r\n        }\r\n        if(data.properties.index < legendData.spei.min){\r\n            myStyleGrid.fillColor = '#FFEDA0'\r\n        }else if(data.properties.index < legendData.spei.min + interval){\r\n            myStyleGrid.fillColor = '#FED976'\r\n        }else if(data.properties.index < legendData.spei.min + 2*interval){\r\n            myStyleGrid.fillColor = '#FED976'\r\n        }else if(data.properties.index < legendData.spei.min + 3*interval){\r\n            myStyleGrid.fillColor = '#FEB24C'\r\n        }else if(data.properties.index < legendData.spei.min + 4*interval){\r\n            myStyleGrid.fillColor = '#FD8D3C'\r\n        }else if(data.properties.index < legendData.spei.min + 5*interval){\r\n            myStyleGrid.fillColor = '#FC4E2A'\r\n        }else if(data.properties.index < legendData.spei.min + 6*interval){\r\n            myStyleGrid.fillColor = '#E31A1C'\r\n        }else if(data.properties.index < legendData.spei.min + 7*interval){\r\n            myStyleGrid.fillColor = '#BD0026'\r\n        }else {\r\n            myStyleGrid.fillColor = '#800026'\r\n        }\r\n        \r\n        return (\r\n        <GeoJSON key={data.properties.grid_id}  data={data} style={myStyleGrid}>\r\n            {console.log(data)}\r\n            <Popup> {Math.round(data.properties.index*1000)/1000} </Popup>\r\n        </GeoJSON>)\r\n        })}\r\n\r\n        {console.log(props.pName)}\r\n        {console.log(url)}\r\n        {console.log('return')}\r\n\r\n    </FeatureGroup> \r\n  )\r\n}\r\n\r\n\r\n\r\nexport default GridData"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}