{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useCallback, useState } from \"react\";\n/**\n * This is a simple hook that will allow you to \"strongly\" type a `Select`\n * component's value since the `onChange` handler only returns a `string`.\n *\n * @param defaultValue - The default value to use\n * @returns an ordered list containing the current value followed by the\n * dispatch function to update the state.\n */\nexport function useSelectState(defaultValue) {\n  var _a = __read(useState(defaultValue), 2),\n    value = _a[0],\n    setValue = _a[1];\n  var setTypedValue = useCallback(function (nextValue) {\n    setValue(nextValue);\n  }, []);\n  return [value, setTypedValue];\n}","map":{"version":3,"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","useCallback","useState","useSelectState","defaultValue","_a","setValue","setTypedValue","nextValue"],"sources":["C:/Users/Administrator/Desktop/Project/myreact/project1/node_modules/@react-md/form/es/useSelectState.js"],"sourcesContent":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { useCallback, useState } from \"react\";\n/**\n * This is a simple hook that will allow you to \"strongly\" type a `Select`\n * component's value since the `onChange` handler only returns a `string`.\n *\n * @param defaultValue - The default value to use\n * @returns an ordered list containing the current value followed by the\n * dispatch function to update the state.\n */\nexport function useSelectState(defaultValue) {\n    var _a = __read(useState(defaultValue), 2), value = _a[0], setValue = _a[1];\n    var setTypedValue = useCallback(function (nextValue) {\n        setValue(nextValue);\n    }, []);\n    return [value, setTypedValue];\n}\n//# sourceMappingURL=useSelectState.js.map"],"mappings":"AAAA,IAAIA,MAAM,GAAI,IAAI,IAAI,IAAI,CAACA,MAAM,IAAK,UAAUC,CAAC,EAAEC,CAAC,EAAE;EAClD,IAAIC,CAAC,GAAG,OAAOC,MAAM,KAAK,UAAU,IAAIH,CAAC,CAACG,MAAM,CAACC,QAAQ,CAAC;EAC1D,IAAI,CAACF,CAAC,EAAE,OAAOF,CAAC;EAChB,IAAIK,CAAC,GAAGH,CAAC,CAACI,IAAI,CAACN,CAAC,CAAC;IAAEO,CAAC;IAAEC,EAAE,GAAG,EAAE;IAAEC,CAAC;EAChC,IAAI;IACA,OAAO,CAACR,CAAC,KAAK,KAAK,CAAC,IAAIA,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAACM,CAAC,GAAGF,CAAC,CAACK,IAAI,EAAE,EAAEC,IAAI,EAAEH,EAAE,CAACI,IAAI,CAACL,CAAC,CAACM,KAAK,CAAC;EAC9E,CAAC,CACD,OAAOC,KAAK,EAAE;IAAEL,CAAC,GAAG;MAAEK,KAAK,EAAEA;IAAM,CAAC;EAAE,CAAC,SAC/B;IACJ,IAAI;MACA,IAAIP,CAAC,IAAI,CAACA,CAAC,CAACI,IAAI,KAAKT,CAAC,GAAGG,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAEH,CAAC,CAACI,IAAI,CAACD,CAAC,CAAC;IACpD,CAAC,SACO;MAAE,IAAII,CAAC,EAAE,MAAMA,CAAC,CAACK,KAAK;IAAE;EACpC;EACA,OAAON,EAAE;AACb,CAAC;AACD,SAASO,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAc,CAACC,YAAY,EAAE;EACzC,IAAIC,EAAE,GAAGpB,MAAM,CAACiB,QAAQ,CAACE,YAAY,CAAC,EAAE,CAAC,CAAC;IAAEL,KAAK,GAAGM,EAAE,CAAC,CAAC,CAAC;IAAEC,QAAQ,GAAGD,EAAE,CAAC,CAAC,CAAC;EAC3E,IAAIE,aAAa,GAAGN,WAAW,CAAC,UAAUO,SAAS,EAAE;IACjDF,QAAQ,CAACE,SAAS,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EACN,OAAO,CAACT,KAAK,EAAEQ,aAAa,CAAC;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}