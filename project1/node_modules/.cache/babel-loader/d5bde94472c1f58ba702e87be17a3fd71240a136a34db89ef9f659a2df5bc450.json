{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMap } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport { useEffect } from \"react\";\nimport legendData from './../data/dataLegend';\nvar Legend = function Legend() {\n  _s();\n  var mapInstance = useMap();\n  var interval = (legendData.spei.max - legendData.spei.min) / 8;\n  useEffect(function () {\n    // get color depending on population density value\n    var getColor = function getColor(d) {\n      return d > legendData.spei.min + 7 * interval ? \"#FFEDA0\" : d > legendData.spei.min + 6 * interval ? \"#FED976\" : d > legendData.spei.min + 5 * interval ? \"#FED976\" : d > legendData.spei.min + 4 * interval ? \"#FEB24C\" : d > legendData.spei.min + 3 * interval ? \"#FD8D3C\" : d > legendData.spei.min + 2 * interval ? \"#FC4E2A\" : d > legendData.spei.min + interval ? \"#E31A1C\" : d > legendData.spei.min ? \"#BD0026\" : \"#800026\";\n    };\n    var legend = L.control({\n      position: \"bottomright\"\n    });\n    legend.onAdd = function () {\n      var div = L.DomUtil.create(\"div\", \"info legend\");\n      var grades = [\n      // legendData.spei.min.toFixed(2),\n      // (legendData.spei.min + interval).toFixed(2), \n      // (legendData.spei.min + 2*interval).toFixed(2), \n      // (legendData.spei.min + 3*interval).toFixed(2), \n      // (legendData.spei.min + 4*interval).toFixed(2), \n      // (legendData.spei.min + 5*interval).toFixed(2), \n      // (legendData.spei.min + 6*interval).toFixed(2), \n      // (legendData.spei.min + 7*interval).toFixed(2)\n\n      (legendData.spei.min + 7 * interval).toFixed(2), (legendData.spei.min + 6 * interval).toFixed(2), (legendData.spei.min + 5 * interval).toFixed(2), (legendData.spei.min + 4 * interval).toFixed(2), (legendData.spei.min + 3 * interval).toFixed(2), (legendData.spei.min + 2 * interval).toFixed(2), (legendData.spei.min + 1 * interval).toFixed(2), legendData.spei.min.toFixed(2)];\n      var labels = [];\n      var from;\n      var to;\n      for (var i = 0; i < grades.length; i++) {\n        from = grades[i];\n        to = grades[i + 1];\n        labels.push('<i style=\"background:' + getColor(from + 1) + '\"></i> ' + from + (to ? \" &ndash; \" + to : \"+\"));\n      }\n      div.innerHTML = labels.join(\"<br>\");\n      return div;\n    };\n    legend.addTo(mapInstance);\n  }, []);\n  return null;\n};\n_s(Legend, \"p3K1w1UMpg7j4EdY1aeJvjNVFc8=\", false, function () {\n  return [useMap];\n});\n_c = Legend;\nexport default Legend;\nvar _c;\n$RefreshReg$(_c, \"Legend\");","map":{"version":3,"names":["useMap","L","useEffect","legendData","Legend","mapInstance","interval","spei","max","min","getColor","d","legend","control","position","onAdd","div","DomUtil","create","grades","toFixed","labels","from","to","i","length","push","innerHTML","join","addTo"],"sources":["C:/Users/Administrator/Desktop/Project/myreact/project1/src/components/Legend.jsx"],"sourcesContent":["import { useMap } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport { useEffect } from \"react\";\r\nimport legendData from  './../data/dataLegend'  \r\n\r\nconst Legend = () => {\r\n    const mapInstance = useMap();\r\n    const interval = (legendData.spei.max - legendData.spei.min)/8\r\n    useEffect(() => {\r\n    // get color depending on population density value\r\n    const getColor = d => {\r\n      return d > legendData.spei.min + 7*interval\r\n        ? \"#FFEDA0\"\r\n        : d > legendData.spei.min + 6*interval\r\n        ? \"#FED976\"\r\n        : d > legendData.spei.min + 5*interval\r\n        ? \"#FED976\"\r\n        : d > legendData.spei.min + 4*interval\r\n        ? \"#FEB24C\"\r\n        : d > legendData.spei.min + 3*interval\r\n        ? \"#FD8D3C\"\r\n        : d > legendData.spei.min + 2*interval\r\n        ? \"#FC4E2A\"\r\n        : d > legendData.spei.min + interval\r\n        ? \"#E31A1C\"\r\n        : d > legendData.spei.min\r\n        ? \"#BD0026\"\r\n        : \"#800026\"\r\n    };\r\n\r\n    const legend = L.control({ position: \"bottomright\" });\r\n\r\n    legend.onAdd = () => {\r\n      const div = L.DomUtil.create(\"div\", \"info legend\");\r\n      const grades = \r\n      [\r\n        // legendData.spei.min.toFixed(2),\r\n        // (legendData.spei.min + interval).toFixed(2), \r\n        // (legendData.spei.min + 2*interval).toFixed(2), \r\n        // (legendData.spei.min + 3*interval).toFixed(2), \r\n        // (legendData.spei.min + 4*interval).toFixed(2), \r\n        // (legendData.spei.min + 5*interval).toFixed(2), \r\n        // (legendData.spei.min + 6*interval).toFixed(2), \r\n        // (legendData.spei.min + 7*interval).toFixed(2)\r\n\r\n        (legendData.spei.min + 7*interval).toFixed(2), \r\n        (legendData.spei.min + 6*interval).toFixed(2), \r\n        (legendData.spei.min + 5*interval).toFixed(2), \r\n        (legendData.spei.min + 4*interval).toFixed(2), \r\n        (legendData.spei.min + 3*interval).toFixed(2), \r\n        (legendData.spei.min + 2*interval).toFixed(2), \r\n        (legendData.spei.min + 1*interval).toFixed(2),\r\n        legendData.spei.min.toFixed(2)\r\n      ];\r\n\r\n      let labels = [];\r\n      let from;\r\n      let to;\r\n\r\n      for (let i = 0; i < grades.length; i++) {\r\n        from = grades[i];\r\n        to = grades[i + 1];\r\n\r\n        labels.push(\r\n          '<i style=\"background:' +\r\n            getColor(from + 1) +\r\n            '\"></i> ' +\r\n            from +\r\n            (to ? \" &ndash; \" + to : \"+\")\r\n        );\r\n      }\r\n\r\n      div.innerHTML = labels.join(\"<br>\");\r\n      return div;\r\n    };\r\n\r\n    legend.addTo(mapInstance);\r\n  } , []);\r\n  return null;\r\n};\r\n\r\nexport default Legend;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}